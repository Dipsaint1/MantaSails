{
	// GENERICS
	"generate function": {
		"prefix": ["mxf", "fhelper"],
		"body": [
			"module.exports = {\n",
			"\tfriendlyName: '$1',\n",
			"\tdescription: 'This is $1',\n",
			"\tinputs: {",
			"\t\t$2",
			"\t},\n",
			"\texits: {",
			"\t\t$3",
			"\t},\n",
			"\tfn: async function (inputs, exits) {\n",
			"\t\t$0\n",
			"\t\t// All done",
			"\t\treturn;",
			"\t}",
			"}"
		],
        "description": "Generate a function following Sails convention"
	},

	"input template": {
		"prefix": ["si", "sinput"],
		"body": [
			"$1: {",
			"\ttype: '$2',",
			"\trequired: ${3:true},",
			"\tdefault: ${0:null},",
			"}"
		],
		"description": "This is an input template"
	},

	"exit template": {
		"prefix": ["ei", "einput"],
		"body": [
			"$1: {",
			"\tresponseType: $2,",
			"\tdescription: '$0'",
			"}"
		],
		"description": "This is an exit template"
	},

	// REQUEST SNIPPETS
	"unpack request body": {
		"prefix": ["rb", "rbody"],
		"body": "const { $1, $0 } = this.req.body",
		"description": "To unpack req.body much faster"
	},

	// WATERLINE SNIPPETS

	"add to collection": {
		"prefix": ["atc", "addtocollection"],
		"body": "await $1.addToCollection($2, '$3').members([$4, $0])",
		"description": "Add IDs of children to parent"
	},

	"archive an object": {
		"prefix": ["arc", "archive"],
		"body": "await $1.archive({ $2: $0 })",
		"description": "Soft-delete records that matches a given criteria"
	},

	"access an archived object": {
		"prefix": ["aarc", "accessarchive"],
		"body": [
			"let ${1:archive} = await Archive.findOne({",
			"\tfromModel: '$2',",
			"\toriginalRecordId: $3",
			"})"
		],
		"description": "Access soft-deleted records that matches a given criteria"
	},

	"calculate average": {
		"prefix": ["avg", "average"],
		"body": [
			"let ${1:average} = await $2.avg('${3:numericCollection}')",
			".where({",
			"\t$4: { $5: $6 }",
			"})"
		],
		"description": "Calculate average of specified attribute"
	},

	"create an object": {
		"prefix": ["co", "createobj"],
		"body": "let $1 = await $2.create({ $0 }).fetch()",
		"description": "To create a new obj"
	},

	"find one object": {
		"prefix": ["fo", "findone"],
		"body": [
			"let $1Record = await $2.findOne({ $3: $4 })\n",
			"if (!$1Record) {\n\tsails.log('Could not find $1')",
			"\tthrow '$0' \n}"
		],
		"description": "To query a single object"
	},

	"find objects": {
		"prefix": ["f", "find"],
		"body": "let $1Record = await $2.find({ $3: $0 })",
		"description": "To query multiple objects"
	},

	"find objects projections": {
		"prefix": ["fop", "findproj"],
		"body": [
			"let $1Record = await $2.find({",
			"\twhere: { $3: $4 },",
			"\tselect: [ $5, $0 ]",
			"});"
		],
		"description": "To query multiple objects with projections"
	},

	"find or create object": {
		"prefix": ["foc", "findorcreate"],
		"body": "let ${1:obj}Record = await $2.findOrCreate({ $3: $4 }, ${0: objectToCreate})",
		"description": "To find an object or create it"
	},

	"find or create object exec": {
		"prefix": ["foce", "findorcreateexec"],
		"body": [
			"let item = $1.findOrCreate({ $2: $3 }, ${4: objectToCreate})",
			".exec(async(${5:err}, ${6:obj}, ${7:wasCreated}) => { \n",
			"\tif(${5:err}) {\n\t\tsails.log(${5:err})\n\t\treturn this.res.serverError(${5:err})\n\t}",
			"\tif(${7:wasCreated}) {\n\t\tsails.log('Created new object')\n\treturn ${6:obj}\n\t}",
			"\telse {\n\t\tsails.log('Found existing object')\n\t\treturn ${6:obj}\n\t}",
			"})",
			"$0"
		],
		"description": "To find an object or create it, with exec"
	}


}